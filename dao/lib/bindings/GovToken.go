// Code generated via abigen V2 - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"bytes"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = bytes.Equal
	_ = errors.New
	_ = big.NewInt
	_ = common.Big1
	_ = types.BloomLookup
	_ = abi.ConvertType
)

// CheckpointsCheckpoint208 is an auto generated low-level Go binding around an user-defined struct.
type CheckpointsCheckpoint208 struct {
	Key   *big.Int
	Value *big.Int
}

// GovTokenMetaData contains all meta data concerning the GovToken contract.
var GovTokenMetaData = bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"structCheckpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	ID:  "GovToken",
	Bin: "0x610160604052348015610010575f5ffd5b50604051612b00380380612b0083398101604081905261002f916108c7565b806040518060400160405280600881526020016723b7bb2a37b5b2b760c11b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600881526020016723b7bb2a37b5b2b760c11b8152506040518060400160405280600281526020016111d560f21b81525081600390816100b79190610984565b5060046100c48282610984565b506100d4915083905060056101d8565b610120526100e38160066101d8565b61014052815160208084019190912060e052815190820120610100524660a05261016f60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b0381166101a757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101b08161020a565b506101d2816101c16012600a610b2d565b6101cd906103e8610b3b565b61025b565b50610c0e565b5f6020835110156101f3576101ec83610293565b9050610204565b816101fe8482610984565b5060ff90505b92915050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166102845760405163ec442f0560e01b81525f600482015260240161019e565b61028f5f83836102d0565b5050565b5f5f829050601f815111156102bd578260405163305a27a960e01b815260040161019e9190610b52565b80516102c882610b87565b179392505050565b6102db8383836102e0565b505050565b6102eb838383610346565b6001600160a01b03831661033b575f61030360025490565b90506001600160d01b038082111561033857604051630e58ae9360e11b8152600481018390526024810182905260440161019e565b50505b6102db83838361046c565b6001600160a01b038316610370578060025f8282546103659190610baa565b909155506103e09050565b6001600160a01b0383165f90815260208190526040902054818110156103c25760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161019e565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166103fc5760028054829003905561041a565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161045f91815260200190565b60405180910390a3505050565b6001600160a01b03831661049a57610497600a6109266104f460201b1761049284610506565b61053d565b50505b6001600160a01b0382166104c3576104c0600a61093161057260201b1761049284610506565b50505b6001600160a01b038381165f908152600860205260408082205485841683529120546102db9291821691168361057d565b5f6104ff8284610bbd565b9392505050565b5f6001600160d01b03821115610539576040516306dfcc6560e41b815260d060048201526024810183905260440161019e565b5090565b5f8061056561054a6106cd565b61055d610556886106db565b868860201c565b879190610722565b915091505b935093915050565b5f6104ff8284610bdc565b816001600160a01b0316836001600160a01b03161415801561059e57505f81115b156102db576001600160a01b03831615610636576001600160a01b0383165f908152600960209081526040822082916105e49190610572901b6109311761049286610506565b6001600160d01b031691506001600160d01b03169150846001600160a01b03165f516020612ae05f395f51905f52838360405161062b929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156102db576001600160a01b0382165f9081526009602090815260408220829161067791906104f4901b6109261761049286610506565b6001600160d01b031691506001600160d01b03169150836001600160a01b03165f516020612ae05f395f51905f5283836040516106be929190918252602082015260400190565b60405180910390a25050505050565b5f6106d661072f565b905090565b80545f90801561071a57610701836106f4600184610bfb565b5f91825260209091200190565b54660100000000000090046001600160d01b03166104ff565b5f9392505050565b5f80610565858585610739565b5f6106d643610895565b82545f9081908015610838575f610755876106f4600185610bfb565b805490915065ffffffffffff80821691660100000000000090046001600160d01b031690881682111561079b57604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff16036107d757825465ffffffffffff1666010000000000006001600160d01b0389160217835561082a565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f555f8f815291909120945191519092166601000000000000029216919091179101555b945085935061056a92505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316660100000000000002919093161792019190915590508161056a565b5f65ffffffffffff821115610539576040516306dfcc6560e41b8152603060048201526024810183905260440161019e565b5f602082840312156108d7575f5ffd5b81516001600160a01b03811681146104ff575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061091557607f821691505b60208210810361093357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102db57805f5260205f20601f840160051c8101602085101561095e5750805b601f840160051c820191505b8181101561097d575f815560010161096a565b5050505050565b81516001600160401b0381111561099d5761099d6108ed565b6109b1816109ab8454610901565b84610939565b6020601f8211600181146109e3575f83156109cc5750848201515b5f19600385901b1c1916600184901b17845561097d565b5f84815260208120601f198516915b82811015610a1257878501518255602094850194600190920191016109f2565b5084821015610a2f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b6001815b600184111561056a57808504811115610a7157610a71610a3e565b6001841615610a7f57908102905b60019390931c928002610a56565b5f82610a9b57506001610204565b81610aa757505f610204565b8160018114610abd5760028114610ac757610ae3565b6001915050610204565b60ff841115610ad857610ad8610a3e565b50506001821b610204565b5060208310610133831016604e8410600b8410161715610b06575081810a610204565b610b125f198484610a52565b805f1904821115610b2557610b25610a3e565b029392505050565b5f6104ff60ff841683610a8d565b808202811582820484141761020457610204610a3e565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80516020808301519190811015610933575f1960209190910360031b1b16919050565b8082018082111561020457610204610a3e565b6001600160d01b03818116838216019081111561020457610204610a3e565b6001600160d01b03828116828216039081111561020457610204610a3e565b8181038181111561020457610204610a3e565b60805160a05160c05160e051610100516101205161014051611e81610c5f5f395f610ded01525f610dc001525f610b0001525f610ad801525f610a3301525f610a5d01525f610a870152611e815ff3fe608060405234801561000f575f5ffd5b50600436106101a1575f3560e01c8063715018a6116100f35780639ab24eb011610093578063d505accf1161006e578063d505accf146103b2578063dd62ed3e146103c5578063f1127ed8146103fd578063f2fde38b1461043c575f5ffd5b80639ab24eb014610379578063a9059cbb1461038c578063c3cda5201461039f575f5ffd5b80638da5cb5b116100ce5780638da5cb5b1461032e5780638e539e8c1461033f57806391ddadf41461035257806395d89b4114610371575f5ffd5b8063715018a6146102f85780637ecebe001461030057806384b0196e14610313575f5ffd5b80633a46b1a81161015e578063587cde1e11610139578063587cde1e146102525780635c19a95c146102955780636fcfff45146102a857806370a08231146102d0575f5ffd5b80633a46b1a81461022257806340c10f19146102355780634bf5d7e91461024a575f5ffd5b806306fdde03146101a5578063095ea7b3146101c357806318160ddd146101e657806323b872dd146101f8578063313ce5671461020b5780633644e5151461021a575b5f5ffd5b6101ad61044f565b6040516101ba9190611ab3565b60405180910390f35b6101d66101d1366004611ae0565b6104df565b60405190151581526020016101ba565b6002545b6040519081526020016101ba565b6101d6610206366004611b08565b6104f8565b604051601281526020016101ba565b6101ea61051b565b6101ea610230366004611ae0565b610529565b610248610243366004611ae0565b610563565b005b6101ad610579565b61027d610260366004611b42565b6001600160a01b039081165f908152600860205260409020541690565b6040516001600160a01b0390911681526020016101ba565b6102486102a3366004611b42565b6105f1565b6102bb6102b6366004611b42565b6105fc565b60405163ffffffff90911681526020016101ba565b6101ea6102de366004611b42565b6001600160a01b03165f9081526020819052604090205490565b610248610606565b6101ea61030e366004611b42565b610619565b61031b610623565b6040516101ba9796959493929190611b5b565b600b546001600160a01b031661027d565b6101ea61034d366004611bf1565b610665565b61035a610689565b60405165ffffffffffff90911681526020016101ba565b6101ad610692565b6101ea610387366004611b42565b6106a1565b6101d661039a366004611ae0565b6106c1565b6102486103ad366004611c18565b6106ce565b6102486103c0366004611c6c565b61078f565b6101ea6103d3366004611cd2565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b61041061040b366004611d03565b6108c5565b60408051825165ffffffffffff1681526020928301516001600160d01b031692810192909252016101ba565b61024861044a366004611b42565b6108e9565b60606003805461045e90611d40565b80601f016020809104026020016040519081016040528092919081815260200182805461048a90611d40565b80156104d55780601f106104ac576101008083540402835291602001916104d5565b820191905f5260205f20905b8154815290600101906020018083116104b857829003601f168201915b5050505050905090565b5f336104ec81858561093c565b60019150505b92915050565b5f3361050585828561094e565b6105108585856109ca565b506001949350505050565b5f610524610a27565b905090565b5f61055361053683610b50565b6001600160a01b0385165f90815260096020526040902090610b9e565b6001600160d01b03169392505050565b61056b610c4e565b6105758282610c7b565b5050565b6060610583610caf565b65ffffffffffff16610593610689565b65ffffffffffff16146105b9576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b336105758183610cb9565b5f6104f282610d2a565b61060e610c4e565b6106175f610d4b565b565b5f6104f282610d9c565b5f6060805f5f5f6060610634610db9565b61063c610de6565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f61067a61067283610b50565b600a90610b9e565b6001600160d01b031692915050565b5f610524610caf565b60606004805461045e90611d40565b6001600160a01b0381165f90815260096020526040812061067a90610e13565b5f336104ec8185856109ca565b834211156106f757604051632341d78760e11b8152600481018590526024015b60405180910390fd5b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610770906107689060a00160405160208183030381529060405280519060200120610e4a565b858585610e76565b905061077c8187610ea2565b6107868188610cb9565b50505050505050565b834211156107b35760405163313c898160e11b8152600481018590526024016106ee565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107fe8c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61085882610e4a565b90505f61086782878787610e76565b9050896001600160a01b0316816001600160a01b0316146108ae576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016106ee565b6108b98a8a8a61093c565b50505050505050505050565b604080518082019091525f80825260208201526108e28383610ef4565b9392505050565b6108f1610c4e565b6001600160a01b03811661091a57604051631e4fbdf760e01b81525f60048201526024016106ee565b61092381610d4b565b50565b5f6108e28284611d8c565b5f6108e28284611dab565b6109498383836001610f28565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156109c457818110156109b657604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016106ee565b6109c484848484035f610f28565b50505050565b6001600160a01b0383166109f357604051634b637e8f60e11b81525f60048201526024016106ee565b6001600160a01b038216610a1c5760405163ec442f0560e01b81525f60048201526024016106ee565b610949838383610ffa565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610a7f57507f000000000000000000000000000000000000000000000000000000000000000046145b15610aa957507f000000000000000000000000000000000000000000000000000000000000000090565b610524604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f5f610b5a610689565b90508065ffffffffffff168310610b9557604051637669fc0f60e11b81526004810184905265ffffffffffff821660248201526044016106ee565b6108e283611005565b81545f9081816005811115610bfa575f610bb78461103b565b610bc19085611dca565b5f8881526020902090915081015465ffffffffffff9081169087161015610bea57809150610bf8565b610bf5816001611ddd565b92505b505b5f610c0787878585611193565b90508015610c4157610c2b87610c1e600184611dca565b5f91825260209091200190565b54600160301b90046001600160d01b0316610c43565b5f5b979650505050505050565b600b546001600160a01b031633146106175760405163118cdaa760e01b81523360048201526024016106ee565b6001600160a01b038216610ca45760405163ec442f0560e01b81525f60048201526024016106ee565b6105755f8383610ffa565b5f61052443611005565b6001600160a01b038281165f8181526008602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46109498183610d25866111f2565b61120f565b6001600160a01b0381165f908152600960205260408120546104f290611378565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0381165f908152600760205260408120546104f2565b60606105247f000000000000000000000000000000000000000000000000000000000000000060056113a8565b60606105247f000000000000000000000000000000000000000000000000000000000000000060066113a8565b80545f908015610e4257610e2c83610c1e600184611dca565b54600160301b90046001600160d01b03166108e2565b5f9392505050565b5f6104f2610e56610a27565b8360405161190160f01b8152600281019290925260228201526042902090565b5f5f5f5f610e8688888888611451565b925092509250610e968282611519565b50909695505050505050565b6001600160a01b0382165f908152600760205260409020805460018101909155818114610949576040516301d4b62360e61b81526001600160a01b0384166004820152602481018290526044016106ee565b604080518082019091525f80825260208201526001600160a01b0383165f9081526009602052604090206108e290836115d1565b6001600160a01b038416610f515760405163e602df0560e01b81525f60048201526024016106ee565b6001600160a01b038316610f7a57604051634a1406b160e11b81525f60048201526024016106ee565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156109c457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610fec91815260200190565b60405180910390a350505050565b61094983838361163e565b5f65ffffffffffff821115611037576040516306dfcc6560e41b815260306004820152602481018390526044016106ee565b5090565b5f60018211611048575090565b816001600160801b82106110615760809190911c9060401b5b68010000000000000000821061107c5760409190911c9060201b5b64010000000082106110935760209190911c9060101b5b6201000082106110a85760109190911c9060081b5b61010082106110bc5760089190911c9060041b5b601082106110cf5760049190911c9060021b5b600482106110db5760011b5b600302600190811c908185816110f3576110f3611df0565b048201901c9050600181858161110b5761110b611df0565b048201901c9050600181858161112357611123611df0565b048201901c9050600181858161113b5761113b611df0565b048201901c9050600181858161115357611153611df0565b048201901c9050600181858161116b5761116b611df0565b048201901c905061118a81858161118457611184611df0565b04821190565b90039392505050565b5f5b818310156111ea575f6111a884846116a4565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff1611156111d6578092506111e4565b6111e1816001611ddd565b93505b50611195565b509392505050565b6001600160a01b0381165f908152602081905260408120546104f2565b816001600160a01b0316836001600160a01b03161415801561123057505f81115b15610949576001600160a01b038316156112d7576001600160a01b0383165f90815260096020526040812081906112729061093161126d866116be565b6116f1565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516112cc929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610949576001600160a01b0382165f908152600960205260408120819061130f9061092661126d866116be565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611369929190918252602082015260400190565b60405180910390a25050505050565b5f63ffffffff821115611037576040516306dfcc6560e41b815260206004820152602481018390526044016106ee565b606060ff83146113c2576113bb83611729565b90506104f2565b8180546113ce90611d40565b80601f01602080910402602001604051908101604052809291908181526020018280546113fa90611d40565b80156114455780601f1061141c57610100808354040283529160200191611445565b820191905f5260205f20905b81548152906001019060200180831161142857829003601f168201915b505050505090506104f2565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561148a57505f9150600390508261150f565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156114db573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661150657505f92506001915082905061150f565b92505f91508190505b9450945094915050565b5f82600381111561152c5761152c611e04565b03611535575050565b600182600381111561154957611549611e04565b036115675760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561157b5761157b611e04565b0361159c5760405163fce698f760e01b8152600481018290526024016106ee565b60038260038111156115b0576115b0611e04565b03610575576040516335e2f38360e21b8152600481018290526024016106ee565b604080518082019091525f8082526020820152825f018263ffffffff16815481106115fe576115fe611e18565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611649838383611766565b6001600160a01b038316611699575f61166160025490565b90506001600160d01b038082111561169657604051630e58ae9360e11b815260048101839052602481018290526044016106ee565b50505b61094983838361188c565b5f6116b26002848418611e2c565b6108e290848416611ddd565b5f6001600160d01b03821115611037576040516306dfcc6560e41b815260d06004820152602481018390526044016106ee565b5f5f61171c6116fe610689565b61171461170a88610e13565b868863ffffffff16565b879190611901565b915091505b935093915050565b60605f6117358361190e565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b6001600160a01b038316611790578060025f8282546117859190611ddd565b909155506118009050565b6001600160a01b0383165f90815260208190526040902054818110156117e25760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016106ee565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661181c5760028054829003905561183a565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161187f91815260200190565b60405180910390a3505050565b6001600160a01b0383166118ae576118ab600a61092661126d846116be565b50505b6001600160a01b0382166118d0576118cd600a61093161126d846116be565b50505b6001600160a01b038381165f908152600860205260408082205485841683529120546109499291821691168361120f565b5f8061171c858585611935565b5f60ff8216601f8111156104f257604051632cd44ac360e21b815260040160405180910390fd5b82545f9081908015611a2b575f61195187610c1e600185611dca565b805490915065ffffffffffff80821691600160301b90046001600160d01b031690881682111561199457604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff16036119cd57825465ffffffffffff16600160301b6001600160d01b03891602178355611a1d565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f555f8f81529190912094519151909216600160301b029216919091179101555b945085935061172192505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081611721565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6108e26020830184611a85565b80356001600160a01b0381168114611adb575f5ffd5b919050565b5f5f60408385031215611af1575f5ffd5b611afa83611ac5565b946020939093013593505050565b5f5f5f60608486031215611b1a575f5ffd5b611b2384611ac5565b9250611b3160208501611ac5565b929592945050506040919091013590565b5f60208284031215611b52575f5ffd5b6108e282611ac5565b60ff60f81b8816815260e060208201525f611b7960e0830189611a85565b8281036040840152611b8b8189611a85565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015611be0578351835260209384019390920191600101611bc2565b50909b9a5050505050505050505050565b5f60208284031215611c01575f5ffd5b5035919050565b803560ff81168114611adb575f5ffd5b5f5f5f5f5f5f60c08789031215611c2d575f5ffd5b611c3687611ac5565b95506020870135945060408701359350611c5260608801611c08565b9598949750929560808101359460a0909101359350915050565b5f5f5f5f5f5f5f60e0888a031215611c82575f5ffd5b611c8b88611ac5565b9650611c9960208901611ac5565b95506040880135945060608801359350611cb560808901611c08565b9699959850939692959460a0840135945060c09093013592915050565b5f5f60408385031215611ce3575f5ffd5b611cec83611ac5565b9150611cfa60208401611ac5565b90509250929050565b5f5f60408385031215611d14575f5ffd5b611d1d83611ac5565b9150602083013563ffffffff81168114611d35575f5ffd5b809150509250929050565b600181811c90821680611d5457607f821691505b602082108103611d7257634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001600160d01b0381811683821601908111156104f2576104f2611d78565b6001600160d01b0382811682821603908111156104f2576104f2611d78565b818103818111156104f2576104f2611d78565b808201808211156104f2576104f2611d78565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f82611e4657634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220ff1fb55b3eaa25c220af348211deb43d3570d6f5ff2f54e4171b5051d3aff97564736f6c634300081e0033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
}

// GovToken is an auto generated Go binding around an Ethereum contract.
type GovToken struct {
	abi abi.ABI
}

// NewGovToken creates a new instance of GovToken.
func NewGovToken() *GovToken {
	parsed, err := GovTokenMetaData.ParseABI()
	if err != nil {
		panic(errors.New("invalid ABI: " + err.Error()))
	}
	return &GovToken{abi: *parsed}
}

// Instance creates a wrapper for a deployed contract instance at the given address.
// Use this to create the instance object passed to abigen v2 library functions Call, Transact, etc.
func (c *GovToken) Instance(backend bind.ContractBackend, addr common.Address) *bind.BoundContract {
	return bind.NewBoundContract(addr, c.abi, backend, backend, backend)
}

// PackConstructor is the Go binding used to pack the parameters required for
// contract deployment.
//
// Solidity: constructor(address initialOwner) returns()
func (govToken *GovToken) PackConstructor(initialOwner common.Address) []byte {
	enc, err := govToken.abi.Pack("", initialOwner)
	if err != nil {
		panic(err)
	}
	return enc
}

// PackCLOCKMODE is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4bf5d7e9.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (govToken *GovToken) PackCLOCKMODE() []byte {
	enc, err := govToken.abi.Pack("CLOCK_MODE")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackCLOCKMODE is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4bf5d7e9.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (govToken *GovToken) TryPackCLOCKMODE() ([]byte, error) {
	return govToken.abi.Pack("CLOCK_MODE")
}

// UnpackCLOCKMODE is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (govToken *GovToken) UnpackCLOCKMODE(data []byte) (string, error) {
	out, err := govToken.abi.Unpack("CLOCK_MODE", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackDOMAINSEPARATOR is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x3644e515.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (govToken *GovToken) PackDOMAINSEPARATOR() []byte {
	enc, err := govToken.abi.Pack("DOMAIN_SEPARATOR")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackDOMAINSEPARATOR is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x3644e515.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (govToken *GovToken) TryPackDOMAINSEPARATOR() ([]byte, error) {
	return govToken.abi.Pack("DOMAIN_SEPARATOR")
}

// UnpackDOMAINSEPARATOR is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (govToken *GovToken) UnpackDOMAINSEPARATOR(data []byte) ([32]byte, error) {
	out, err := govToken.abi.Unpack("DOMAIN_SEPARATOR", data)
	if err != nil {
		return *new([32]byte), err
	}
	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	return out0, nil
}

// PackAllowance is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xdd62ed3e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (govToken *GovToken) PackAllowance(owner common.Address, spender common.Address) []byte {
	enc, err := govToken.abi.Pack("allowance", owner, spender)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackAllowance is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xdd62ed3e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (govToken *GovToken) TryPackAllowance(owner common.Address, spender common.Address) ([]byte, error) {
	return govToken.abi.Pack("allowance", owner, spender)
}

// UnpackAllowance is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (govToken *GovToken) UnpackAllowance(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("allowance", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (govToken *GovToken) PackApprove(spender common.Address, value *big.Int) []byte {
	enc, err := govToken.abi.Pack("approve", spender, value)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (govToken *GovToken) TryPackApprove(spender common.Address, value *big.Int) ([]byte, error) {
	return govToken.abi.Pack("approve", spender, value)
}

// UnpackApprove is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (govToken *GovToken) UnpackApprove(data []byte) (bool, error) {
	out, err := govToken.abi.Unpack("approve", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (govToken *GovToken) PackBalanceOf(account common.Address) []byte {
	enc, err := govToken.abi.Pack("balanceOf", account)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (govToken *GovToken) TryPackBalanceOf(account common.Address) ([]byte, error) {
	return govToken.abi.Pack("balanceOf", account)
}

// UnpackBalanceOf is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (govToken *GovToken) UnpackBalanceOf(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("balanceOf", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackCheckpoints is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xf1127ed8.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (govToken *GovToken) PackCheckpoints(account common.Address, pos uint32) []byte {
	enc, err := govToken.abi.Pack("checkpoints", account, pos)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackCheckpoints is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xf1127ed8.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (govToken *GovToken) TryPackCheckpoints(account common.Address, pos uint32) ([]byte, error) {
	return govToken.abi.Pack("checkpoints", account, pos)
}

// UnpackCheckpoints is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (govToken *GovToken) UnpackCheckpoints(data []byte) (CheckpointsCheckpoint208, error) {
	out, err := govToken.abi.Unpack("checkpoints", data)
	if err != nil {
		return *new(CheckpointsCheckpoint208), err
	}
	out0 := *abi.ConvertType(out[0], new(CheckpointsCheckpoint208)).(*CheckpointsCheckpoint208)
	return out0, nil
}

// PackClock is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x91ddadf4.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function clock() view returns(uint48)
func (govToken *GovToken) PackClock() []byte {
	enc, err := govToken.abi.Pack("clock")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackClock is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x91ddadf4.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function clock() view returns(uint48)
func (govToken *GovToken) TryPackClock() ([]byte, error) {
	return govToken.abi.Pack("clock")
}

// UnpackClock is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (govToken *GovToken) UnpackClock(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("clock", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackDecimals is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x313ce567.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function decimals() view returns(uint8)
func (govToken *GovToken) PackDecimals() []byte {
	enc, err := govToken.abi.Pack("decimals")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackDecimals is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x313ce567.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function decimals() view returns(uint8)
func (govToken *GovToken) TryPackDecimals() ([]byte, error) {
	return govToken.abi.Pack("decimals")
}

// UnpackDecimals is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (govToken *GovToken) UnpackDecimals(data []byte) (uint8, error) {
	out, err := govToken.abi.Unpack("decimals", data)
	if err != nil {
		return *new(uint8), err
	}
	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, nil
}

// PackDelegate is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x5c19a95c.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function delegate(address delegatee) returns()
func (govToken *GovToken) PackDelegate(delegatee common.Address) []byte {
	enc, err := govToken.abi.Pack("delegate", delegatee)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackDelegate is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x5c19a95c.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function delegate(address delegatee) returns()
func (govToken *GovToken) TryPackDelegate(delegatee common.Address) ([]byte, error) {
	return govToken.abi.Pack("delegate", delegatee)
}

// PackDelegateBySig is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc3cda520.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (govToken *GovToken) PackDelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) []byte {
	enc, err := govToken.abi.Pack("delegateBySig", delegatee, nonce, expiry, v, r, s)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackDelegateBySig is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc3cda520.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (govToken *GovToken) TryPackDelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) ([]byte, error) {
	return govToken.abi.Pack("delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// PackDelegates is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x587cde1e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function delegates(address account) view returns(address)
func (govToken *GovToken) PackDelegates(account common.Address) []byte {
	enc, err := govToken.abi.Pack("delegates", account)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackDelegates is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x587cde1e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function delegates(address account) view returns(address)
func (govToken *GovToken) TryPackDelegates(account common.Address) ([]byte, error) {
	return govToken.abi.Pack("delegates", account)
}

// UnpackDelegates is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (govToken *GovToken) UnpackDelegates(data []byte) (common.Address, error) {
	out, err := govToken.abi.Unpack("delegates", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackEip712Domain is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x84b0196e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (govToken *GovToken) PackEip712Domain() []byte {
	enc, err := govToken.abi.Pack("eip712Domain")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackEip712Domain is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x84b0196e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (govToken *GovToken) TryPackEip712Domain() ([]byte, error) {
	return govToken.abi.Pack("eip712Domain")
}

// Eip712DomainOutput serves as a container for the return parameters of contract
// method Eip712Domain.
type Eip712DomainOutput struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}

// UnpackEip712Domain is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (govToken *GovToken) UnpackEip712Domain(data []byte) (Eip712DomainOutput, error) {
	out, err := govToken.abi.Unpack("eip712Domain", data)
	outstruct := new(Eip712DomainOutput)
	if err != nil {
		return *outstruct, err
	}
	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = abi.ConvertType(out[3], new(big.Int)).(*big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)
	return *outstruct, nil
}

// PackGetPastTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x8e539e8c.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (govToken *GovToken) PackGetPastTotalSupply(timepoint *big.Int) []byte {
	enc, err := govToken.abi.Pack("getPastTotalSupply", timepoint)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackGetPastTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x8e539e8c.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (govToken *GovToken) TryPackGetPastTotalSupply(timepoint *big.Int) ([]byte, error) {
	return govToken.abi.Pack("getPastTotalSupply", timepoint)
}

// UnpackGetPastTotalSupply is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (govToken *GovToken) UnpackGetPastTotalSupply(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("getPastTotalSupply", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackGetPastVotes is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x3a46b1a8.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (govToken *GovToken) PackGetPastVotes(account common.Address, timepoint *big.Int) []byte {
	enc, err := govToken.abi.Pack("getPastVotes", account, timepoint)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackGetPastVotes is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x3a46b1a8.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (govToken *GovToken) TryPackGetPastVotes(account common.Address, timepoint *big.Int) ([]byte, error) {
	return govToken.abi.Pack("getPastVotes", account, timepoint)
}

// UnpackGetPastVotes is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (govToken *GovToken) UnpackGetPastVotes(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("getPastVotes", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackGetVotes is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x9ab24eb0.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (govToken *GovToken) PackGetVotes(account common.Address) []byte {
	enc, err := govToken.abi.Pack("getVotes", account)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackGetVotes is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x9ab24eb0.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (govToken *GovToken) TryPackGetVotes(account common.Address) ([]byte, error) {
	return govToken.abi.Pack("getVotes", account)
}

// UnpackGetVotes is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (govToken *GovToken) UnpackGetVotes(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("getVotes", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackMint is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x40c10f19.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (govToken *GovToken) PackMint(to common.Address, amount *big.Int) []byte {
	enc, err := govToken.abi.Pack("mint", to, amount)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackMint is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x40c10f19.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (govToken *GovToken) TryPackMint(to common.Address, amount *big.Int) ([]byte, error) {
	return govToken.abi.Pack("mint", to, amount)
}

// PackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function name() view returns(string)
func (govToken *GovToken) PackName() []byte {
	enc, err := govToken.abi.Pack("name")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function name() view returns(string)
func (govToken *GovToken) TryPackName() ([]byte, error) {
	return govToken.abi.Pack("name")
}

// UnpackName is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (govToken *GovToken) UnpackName(data []byte) (string, error) {
	out, err := govToken.abi.Unpack("name", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackNonces is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x7ecebe00.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (govToken *GovToken) PackNonces(owner common.Address) []byte {
	enc, err := govToken.abi.Pack("nonces", owner)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackNonces is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x7ecebe00.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (govToken *GovToken) TryPackNonces(owner common.Address) ([]byte, error) {
	return govToken.abi.Pack("nonces", owner)
}

// UnpackNonces is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (govToken *GovToken) UnpackNonces(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("nonces", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackNumCheckpoints is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6fcfff45.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (govToken *GovToken) PackNumCheckpoints(account common.Address) []byte {
	enc, err := govToken.abi.Pack("numCheckpoints", account)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackNumCheckpoints is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6fcfff45.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (govToken *GovToken) TryPackNumCheckpoints(account common.Address) ([]byte, error) {
	return govToken.abi.Pack("numCheckpoints", account)
}

// UnpackNumCheckpoints is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (govToken *GovToken) UnpackNumCheckpoints(data []byte) (uint32, error) {
	out, err := govToken.abi.Unpack("numCheckpoints", data)
	if err != nil {
		return *new(uint32), err
	}
	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)
	return out0, nil
}

// PackOwner is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x8da5cb5b.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function owner() view returns(address)
func (govToken *GovToken) PackOwner() []byte {
	enc, err := govToken.abi.Pack("owner")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackOwner is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x8da5cb5b.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function owner() view returns(address)
func (govToken *GovToken) TryPackOwner() ([]byte, error) {
	return govToken.abi.Pack("owner")
}

// UnpackOwner is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (govToken *GovToken) UnpackOwner(data []byte) (common.Address, error) {
	out, err := govToken.abi.Unpack("owner", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackPermit is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xd505accf.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (govToken *GovToken) PackPermit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) []byte {
	enc, err := govToken.abi.Pack("permit", owner, spender, value, deadline, v, r, s)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackPermit is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xd505accf.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (govToken *GovToken) TryPackPermit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) ([]byte, error) {
	return govToken.abi.Pack("permit", owner, spender, value, deadline, v, r, s)
}

// PackRenounceOwnership is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x715018a6.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function renounceOwnership() returns()
func (govToken *GovToken) PackRenounceOwnership() []byte {
	enc, err := govToken.abi.Pack("renounceOwnership")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackRenounceOwnership is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x715018a6.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function renounceOwnership() returns()
func (govToken *GovToken) TryPackRenounceOwnership() ([]byte, error) {
	return govToken.abi.Pack("renounceOwnership")
}

// PackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function symbol() view returns(string)
func (govToken *GovToken) PackSymbol() []byte {
	enc, err := govToken.abi.Pack("symbol")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function symbol() view returns(string)
func (govToken *GovToken) TryPackSymbol() ([]byte, error) {
	return govToken.abi.Pack("symbol")
}

// UnpackSymbol is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (govToken *GovToken) UnpackSymbol(data []byte) (string, error) {
	out, err := govToken.abi.Unpack("symbol", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function totalSupply() view returns(uint256)
func (govToken *GovToken) PackTotalSupply() []byte {
	enc, err := govToken.abi.Pack("totalSupply")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function totalSupply() view returns(uint256)
func (govToken *GovToken) TryPackTotalSupply() ([]byte, error) {
	return govToken.abi.Pack("totalSupply")
}

// UnpackTotalSupply is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (govToken *GovToken) UnpackTotalSupply(data []byte) (*big.Int, error) {
	out, err := govToken.abi.Unpack("totalSupply", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTransfer is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa9059cbb.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (govToken *GovToken) PackTransfer(to common.Address, value *big.Int) []byte {
	enc, err := govToken.abi.Pack("transfer", to, value)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTransfer is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa9059cbb.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (govToken *GovToken) TryPackTransfer(to common.Address, value *big.Int) ([]byte, error) {
	return govToken.abi.Pack("transfer", to, value)
}

// UnpackTransfer is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (govToken *GovToken) UnpackTransfer(data []byte) (bool, error) {
	out, err := govToken.abi.Unpack("transfer", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (govToken *GovToken) PackTransferFrom(from common.Address, to common.Address, value *big.Int) []byte {
	enc, err := govToken.abi.Pack("transferFrom", from, to, value)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (govToken *GovToken) TryPackTransferFrom(from common.Address, to common.Address, value *big.Int) ([]byte, error) {
	return govToken.abi.Pack("transferFrom", from, to, value)
}

// UnpackTransferFrom is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (govToken *GovToken) UnpackTransferFrom(data []byte) (bool, error) {
	out, err := govToken.abi.Unpack("transferFrom", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackTransferOwnership is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xf2fde38b.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (govToken *GovToken) PackTransferOwnership(newOwner common.Address) []byte {
	enc, err := govToken.abi.Pack("transferOwnership", newOwner)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTransferOwnership is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xf2fde38b.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (govToken *GovToken) TryPackTransferOwnership(newOwner common.Address) ([]byte, error) {
	return govToken.abi.Pack("transferOwnership", newOwner)
}

// GovTokenApproval represents a Approval event raised by the GovToken contract.
type GovTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     *types.Log // Blockchain specific contextual infos
}

const GovTokenApprovalEventName = "Approval"

// ContractEventName returns the user-defined event name.
func (GovTokenApproval) ContractEventName() string {
	return GovTokenApprovalEventName
}

// UnpackApprovalEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (govToken *GovToken) UnpackApprovalEvent(log *types.Log) (*GovTokenApproval, error) {
	event := "Approval"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenApproval)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// GovTokenDelegateChanged represents a DelegateChanged event raised by the GovToken contract.
type GovTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          *types.Log // Blockchain specific contextual infos
}

const GovTokenDelegateChangedEventName = "DelegateChanged"

// ContractEventName returns the user-defined event name.
func (GovTokenDelegateChanged) ContractEventName() string {
	return GovTokenDelegateChangedEventName
}

// UnpackDelegateChangedEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (govToken *GovToken) UnpackDelegateChangedEvent(log *types.Log) (*GovTokenDelegateChanged, error) {
	event := "DelegateChanged"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenDelegateChanged)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// GovTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the GovToken contract.
type GovTokenDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           *types.Log // Blockchain specific contextual infos
}

const GovTokenDelegateVotesChangedEventName = "DelegateVotesChanged"

// ContractEventName returns the user-defined event name.
func (GovTokenDelegateVotesChanged) ContractEventName() string {
	return GovTokenDelegateVotesChangedEventName
}

// UnpackDelegateVotesChangedEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (govToken *GovToken) UnpackDelegateVotesChangedEvent(log *types.Log) (*GovTokenDelegateVotesChanged, error) {
	event := "DelegateVotesChanged"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenDelegateVotesChanged)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// GovTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the GovToken contract.
type GovTokenEIP712DomainChanged struct {
	Raw *types.Log // Blockchain specific contextual infos
}

const GovTokenEIP712DomainChangedEventName = "EIP712DomainChanged"

// ContractEventName returns the user-defined event name.
func (GovTokenEIP712DomainChanged) ContractEventName() string {
	return GovTokenEIP712DomainChangedEventName
}

// UnpackEIP712DomainChangedEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event EIP712DomainChanged()
func (govToken *GovToken) UnpackEIP712DomainChangedEvent(log *types.Log) (*GovTokenEIP712DomainChanged, error) {
	event := "EIP712DomainChanged"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenEIP712DomainChanged)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// GovTokenOwnershipTransferred represents a OwnershipTransferred event raised by the GovToken contract.
type GovTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           *types.Log // Blockchain specific contextual infos
}

const GovTokenOwnershipTransferredEventName = "OwnershipTransferred"

// ContractEventName returns the user-defined event name.
func (GovTokenOwnershipTransferred) ContractEventName() string {
	return GovTokenOwnershipTransferredEventName
}

// UnpackOwnershipTransferredEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (govToken *GovToken) UnpackOwnershipTransferredEvent(log *types.Log) (*GovTokenOwnershipTransferred, error) {
	event := "OwnershipTransferred"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenOwnershipTransferred)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// GovTokenTransfer represents a Transfer event raised by the GovToken contract.
type GovTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   *types.Log // Blockchain specific contextual infos
}

const GovTokenTransferEventName = "Transfer"

// ContractEventName returns the user-defined event name.
func (GovTokenTransfer) ContractEventName() string {
	return GovTokenTransferEventName
}

// UnpackTransferEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (govToken *GovToken) UnpackTransferEvent(log *types.Log) (*GovTokenTransfer, error) {
	event := "Transfer"
	if log.Topics[0] != govToken.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(GovTokenTransfer)
	if len(log.Data) > 0 {
		if err := govToken.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range govToken.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// UnpackError attempts to decode the provided error data using user-defined
// error definitions.
func (govToken *GovToken) UnpackError(raw []byte) (any, error) {
	if bytes.Equal(raw[:4], govToken.abi.Errors["CheckpointUnorderedInsertion"].ID.Bytes()[:4]) {
		return govToken.UnpackCheckpointUnorderedInsertionError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ECDSAInvalidSignature"].ID.Bytes()[:4]) {
		return govToken.UnpackECDSAInvalidSignatureError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ECDSAInvalidSignatureLength"].ID.Bytes()[:4]) {
		return govToken.UnpackECDSAInvalidSignatureLengthError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ECDSAInvalidSignatureS"].ID.Bytes()[:4]) {
		return govToken.UnpackECDSAInvalidSignatureSError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20ExceededSafeSupply"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20ExceededSafeSupplyError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InsufficientAllowance"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InsufficientAllowanceError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InsufficientBalance"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InsufficientBalanceError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InvalidApprover"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InvalidApproverError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InvalidReceiver"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InvalidReceiverError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InvalidSender"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InvalidSenderError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC20InvalidSpender"].ID.Bytes()[:4]) {
		return govToken.UnpackERC20InvalidSpenderError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC2612ExpiredSignature"].ID.Bytes()[:4]) {
		return govToken.UnpackERC2612ExpiredSignatureError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC2612InvalidSigner"].ID.Bytes()[:4]) {
		return govToken.UnpackERC2612InvalidSignerError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC5805FutureLookup"].ID.Bytes()[:4]) {
		return govToken.UnpackERC5805FutureLookupError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["ERC6372InconsistentClock"].ID.Bytes()[:4]) {
		return govToken.UnpackERC6372InconsistentClockError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["InvalidAccountNonce"].ID.Bytes()[:4]) {
		return govToken.UnpackInvalidAccountNonceError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["InvalidShortString"].ID.Bytes()[:4]) {
		return govToken.UnpackInvalidShortStringError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["OwnableInvalidOwner"].ID.Bytes()[:4]) {
		return govToken.UnpackOwnableInvalidOwnerError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["OwnableUnauthorizedAccount"].ID.Bytes()[:4]) {
		return govToken.UnpackOwnableUnauthorizedAccountError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["SafeCastOverflowedUintDowncast"].ID.Bytes()[:4]) {
		return govToken.UnpackSafeCastOverflowedUintDowncastError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["StringTooLong"].ID.Bytes()[:4]) {
		return govToken.UnpackStringTooLongError(raw[4:])
	}
	if bytes.Equal(raw[:4], govToken.abi.Errors["VotesExpiredSignature"].ID.Bytes()[:4]) {
		return govToken.UnpackVotesExpiredSignatureError(raw[4:])
	}
	return nil, errors.New("Unknown error")
}

// GovTokenCheckpointUnorderedInsertion represents a CheckpointUnorderedInsertion error raised by the GovToken contract.
type GovTokenCheckpointUnorderedInsertion struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error CheckpointUnorderedInsertion()
func GovTokenCheckpointUnorderedInsertionErrorID() common.Hash {
	return common.HexToHash("0x2520601d9d60b717c34a36ad270857824c5a1ebbfd08ff39aba6930089495cfa")
}

// UnpackCheckpointUnorderedInsertionError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error CheckpointUnorderedInsertion()
func (govToken *GovToken) UnpackCheckpointUnorderedInsertionError(raw []byte) (*GovTokenCheckpointUnorderedInsertion, error) {
	out := new(GovTokenCheckpointUnorderedInsertion)
	if err := govToken.abi.UnpackIntoInterface(out, "CheckpointUnorderedInsertion", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenECDSAInvalidSignature represents a ECDSAInvalidSignature error raised by the GovToken contract.
type GovTokenECDSAInvalidSignature struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ECDSAInvalidSignature()
func GovTokenECDSAInvalidSignatureErrorID() common.Hash {
	return common.HexToHash("0xf645eedf0193584640b6b90cb9477e4c95b98636c148a891d4c0a146dc46e75a")
}

// UnpackECDSAInvalidSignatureError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ECDSAInvalidSignature()
func (govToken *GovToken) UnpackECDSAInvalidSignatureError(raw []byte) (*GovTokenECDSAInvalidSignature, error) {
	out := new(GovTokenECDSAInvalidSignature)
	if err := govToken.abi.UnpackIntoInterface(out, "ECDSAInvalidSignature", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenECDSAInvalidSignatureLength represents a ECDSAInvalidSignatureLength error raised by the GovToken contract.
type GovTokenECDSAInvalidSignatureLength struct {
	Length *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ECDSAInvalidSignatureLength(uint256 length)
func GovTokenECDSAInvalidSignatureLengthErrorID() common.Hash {
	return common.HexToHash("0xfce698f7e8e5342cd615f641317bc45fe7e1e4a8b0a14dd1383ff8dc9c41917f")
}

// UnpackECDSAInvalidSignatureLengthError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ECDSAInvalidSignatureLength(uint256 length)
func (govToken *GovToken) UnpackECDSAInvalidSignatureLengthError(raw []byte) (*GovTokenECDSAInvalidSignatureLength, error) {
	out := new(GovTokenECDSAInvalidSignatureLength)
	if err := govToken.abi.UnpackIntoInterface(out, "ECDSAInvalidSignatureLength", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenECDSAInvalidSignatureS represents a ECDSAInvalidSignatureS error raised by the GovToken contract.
type GovTokenECDSAInvalidSignatureS struct {
	S [32]byte
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ECDSAInvalidSignatureS(bytes32 s)
func GovTokenECDSAInvalidSignatureSErrorID() common.Hash {
	return common.HexToHash("0xd78bce0cccb935155ed6428d1c13e50b7f3550fd2b66b9fe266006fea4a5e1eb")
}

// UnpackECDSAInvalidSignatureSError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ECDSAInvalidSignatureS(bytes32 s)
func (govToken *GovToken) UnpackECDSAInvalidSignatureSError(raw []byte) (*GovTokenECDSAInvalidSignatureS, error) {
	out := new(GovTokenECDSAInvalidSignatureS)
	if err := govToken.abi.UnpackIntoInterface(out, "ECDSAInvalidSignatureS", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20ExceededSafeSupply represents a ERC20ExceededSafeSupply error raised by the GovToken contract.
type GovTokenERC20ExceededSafeSupply struct {
	IncreasedSupply *big.Int
	Cap             *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap)
func GovTokenERC20ExceededSafeSupplyErrorID() common.Hash {
	return common.HexToHash("0x1cb15d26dea6ae78228522d00b5965f950275bea9a67abeec04cb99806defd4c")
}

// UnpackERC20ExceededSafeSupplyError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap)
func (govToken *GovToken) UnpackERC20ExceededSafeSupplyError(raw []byte) (*GovTokenERC20ExceededSafeSupply, error) {
	out := new(GovTokenERC20ExceededSafeSupply)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20ExceededSafeSupply", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InsufficientAllowance represents a ERC20InsufficientAllowance error raised by the GovToken contract.
type GovTokenERC20InsufficientAllowance struct {
	Spender   common.Address
	Allowance *big.Int
	Needed    *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)
func GovTokenERC20InsufficientAllowanceErrorID() common.Hash {
	return common.HexToHash("0xfb8f41b23e99d2101d86da76cdfa87dd51c82ed07d3cb62cbc473e469dbc75c3")
}

// UnpackERC20InsufficientAllowanceError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)
func (govToken *GovToken) UnpackERC20InsufficientAllowanceError(raw []byte) (*GovTokenERC20InsufficientAllowance, error) {
	out := new(GovTokenERC20InsufficientAllowance)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InsufficientAllowance", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InsufficientBalance represents a ERC20InsufficientBalance error raised by the GovToken contract.
type GovTokenERC20InsufficientBalance struct {
	Sender  common.Address
	Balance *big.Int
	Needed  *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)
func GovTokenERC20InsufficientBalanceErrorID() common.Hash {
	return common.HexToHash("0xe450d38cd8d9f7d95077d567d60ed49c7254716e6ad08fc9872816c97e0ffec6")
}

// UnpackERC20InsufficientBalanceError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)
func (govToken *GovToken) UnpackERC20InsufficientBalanceError(raw []byte) (*GovTokenERC20InsufficientBalance, error) {
	out := new(GovTokenERC20InsufficientBalance)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InsufficientBalance", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InvalidApprover represents a ERC20InvalidApprover error raised by the GovToken contract.
type GovTokenERC20InvalidApprover struct {
	Approver common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InvalidApprover(address approver)
func GovTokenERC20InvalidApproverErrorID() common.Hash {
	return common.HexToHash("0xe602df05cc75712490294c6c104ab7c17f4030363910a7a2626411c6d3118847")
}

// UnpackERC20InvalidApproverError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InvalidApprover(address approver)
func (govToken *GovToken) UnpackERC20InvalidApproverError(raw []byte) (*GovTokenERC20InvalidApprover, error) {
	out := new(GovTokenERC20InvalidApprover)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InvalidApprover", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InvalidReceiver represents a ERC20InvalidReceiver error raised by the GovToken contract.
type GovTokenERC20InvalidReceiver struct {
	Receiver common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InvalidReceiver(address receiver)
func GovTokenERC20InvalidReceiverErrorID() common.Hash {
	return common.HexToHash("0xec442f055133b72f3b2f9f0bb351c406b178527de2040a7d1feb4e058771f613")
}

// UnpackERC20InvalidReceiverError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InvalidReceiver(address receiver)
func (govToken *GovToken) UnpackERC20InvalidReceiverError(raw []byte) (*GovTokenERC20InvalidReceiver, error) {
	out := new(GovTokenERC20InvalidReceiver)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InvalidReceiver", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InvalidSender represents a ERC20InvalidSender error raised by the GovToken contract.
type GovTokenERC20InvalidSender struct {
	Sender common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InvalidSender(address sender)
func GovTokenERC20InvalidSenderErrorID() common.Hash {
	return common.HexToHash("0x96c6fd1edd0cd6ef7ff0ecc0facdf53148dc0048b57fe58af65755250a7a96bd")
}

// UnpackERC20InvalidSenderError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InvalidSender(address sender)
func (govToken *GovToken) UnpackERC20InvalidSenderError(raw []byte) (*GovTokenERC20InvalidSender, error) {
	out := new(GovTokenERC20InvalidSender)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InvalidSender", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC20InvalidSpender represents a ERC20InvalidSpender error raised by the GovToken contract.
type GovTokenERC20InvalidSpender struct {
	Spender common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC20InvalidSpender(address spender)
func GovTokenERC20InvalidSpenderErrorID() common.Hash {
	return common.HexToHash("0x94280d62c347d8d9f4d59a76ea321452406db88df38e0c9da304f58b57b373a2")
}

// UnpackERC20InvalidSpenderError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC20InvalidSpender(address spender)
func (govToken *GovToken) UnpackERC20InvalidSpenderError(raw []byte) (*GovTokenERC20InvalidSpender, error) {
	out := new(GovTokenERC20InvalidSpender)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC20InvalidSpender", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC2612ExpiredSignature represents a ERC2612ExpiredSignature error raised by the GovToken contract.
type GovTokenERC2612ExpiredSignature struct {
	Deadline *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC2612ExpiredSignature(uint256 deadline)
func GovTokenERC2612ExpiredSignatureErrorID() common.Hash {
	return common.HexToHash("0x627913023c184eaad13735d5a3d2657ae76ec9a872a70e0fc57522ef1a114d58")
}

// UnpackERC2612ExpiredSignatureError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC2612ExpiredSignature(uint256 deadline)
func (govToken *GovToken) UnpackERC2612ExpiredSignatureError(raw []byte) (*GovTokenERC2612ExpiredSignature, error) {
	out := new(GovTokenERC2612ExpiredSignature)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC2612ExpiredSignature", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC2612InvalidSigner represents a ERC2612InvalidSigner error raised by the GovToken contract.
type GovTokenERC2612InvalidSigner struct {
	Signer common.Address
	Owner  common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC2612InvalidSigner(address signer, address owner)
func GovTokenERC2612InvalidSignerErrorID() common.Hash {
	return common.HexToHash("0x4b800e463b323b1d856edf9dec70329a639d13874a57f5c28219ff57128756db")
}

// UnpackERC2612InvalidSignerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC2612InvalidSigner(address signer, address owner)
func (govToken *GovToken) UnpackERC2612InvalidSignerError(raw []byte) (*GovTokenERC2612InvalidSigner, error) {
	out := new(GovTokenERC2612InvalidSigner)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC2612InvalidSigner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC5805FutureLookup represents a ERC5805FutureLookup error raised by the GovToken contract.
type GovTokenERC5805FutureLookup struct {
	Timepoint *big.Int
	Clock     *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC5805FutureLookup(uint256 timepoint, uint48 clock)
func GovTokenERC5805FutureLookupErrorID() common.Hash {
	return common.HexToHash("0xecd3f81ef0a2e77b4e11bb288f0a162344834f778af7e47bdbee611607f14457")
}

// UnpackERC5805FutureLookupError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC5805FutureLookup(uint256 timepoint, uint48 clock)
func (govToken *GovToken) UnpackERC5805FutureLookupError(raw []byte) (*GovTokenERC5805FutureLookup, error) {
	out := new(GovTokenERC5805FutureLookup)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC5805FutureLookup", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenERC6372InconsistentClock represents a ERC6372InconsistentClock error raised by the GovToken contract.
type GovTokenERC6372InconsistentClock struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC6372InconsistentClock()
func GovTokenERC6372InconsistentClockErrorID() common.Hash {
	return common.HexToHash("0x6ff07140ae905cb0f8e72fb38f5dd8e756c387b0065be0e1bf85bd0621a43dc7")
}

// UnpackERC6372InconsistentClockError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC6372InconsistentClock()
func (govToken *GovToken) UnpackERC6372InconsistentClockError(raw []byte) (*GovTokenERC6372InconsistentClock, error) {
	out := new(GovTokenERC6372InconsistentClock)
	if err := govToken.abi.UnpackIntoInterface(out, "ERC6372InconsistentClock", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenInvalidAccountNonce represents a InvalidAccountNonce error raised by the GovToken contract.
type GovTokenInvalidAccountNonce struct {
	Account      common.Address
	CurrentNonce *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error InvalidAccountNonce(address account, uint256 currentNonce)
func GovTokenInvalidAccountNonceErrorID() common.Hash {
	return common.HexToHash("0x752d88c0de02638abf10e8e31861e4c68dc1f3a1e7d840e580683f2c282bfc7a")
}

// UnpackInvalidAccountNonceError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error InvalidAccountNonce(address account, uint256 currentNonce)
func (govToken *GovToken) UnpackInvalidAccountNonceError(raw []byte) (*GovTokenInvalidAccountNonce, error) {
	out := new(GovTokenInvalidAccountNonce)
	if err := govToken.abi.UnpackIntoInterface(out, "InvalidAccountNonce", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenInvalidShortString represents a InvalidShortString error raised by the GovToken contract.
type GovTokenInvalidShortString struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error InvalidShortString()
func GovTokenInvalidShortStringErrorID() common.Hash {
	return common.HexToHash("0xb3512b0c6163e5f0bafab72bb631b9d58cd7a731b082f910338aa21c83d5c274")
}

// UnpackInvalidShortStringError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error InvalidShortString()
func (govToken *GovToken) UnpackInvalidShortStringError(raw []byte) (*GovTokenInvalidShortString, error) {
	out := new(GovTokenInvalidShortString)
	if err := govToken.abi.UnpackIntoInterface(out, "InvalidShortString", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenOwnableInvalidOwner represents a OwnableInvalidOwner error raised by the GovToken contract.
type GovTokenOwnableInvalidOwner struct {
	Owner common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnableInvalidOwner(address owner)
func GovTokenOwnableInvalidOwnerErrorID() common.Hash {
	return common.HexToHash("0x1e4fbdf7f3ef8bcaa855599e3abf48b232380f183f08f6f813d9ffa5bd585188")
}

// UnpackOwnableInvalidOwnerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnableInvalidOwner(address owner)
func (govToken *GovToken) UnpackOwnableInvalidOwnerError(raw []byte) (*GovTokenOwnableInvalidOwner, error) {
	out := new(GovTokenOwnableInvalidOwner)
	if err := govToken.abi.UnpackIntoInterface(out, "OwnableInvalidOwner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenOwnableUnauthorizedAccount represents a OwnableUnauthorizedAccount error raised by the GovToken contract.
type GovTokenOwnableUnauthorizedAccount struct {
	Account common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnableUnauthorizedAccount(address account)
func GovTokenOwnableUnauthorizedAccountErrorID() common.Hash {
	return common.HexToHash("0x118cdaa7a341953d1887a2245fd6665d741c67c8c50581daa59e1d03373fa188")
}

// UnpackOwnableUnauthorizedAccountError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnableUnauthorizedAccount(address account)
func (govToken *GovToken) UnpackOwnableUnauthorizedAccountError(raw []byte) (*GovTokenOwnableUnauthorizedAccount, error) {
	out := new(GovTokenOwnableUnauthorizedAccount)
	if err := govToken.abi.UnpackIntoInterface(out, "OwnableUnauthorizedAccount", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenSafeCastOverflowedUintDowncast represents a SafeCastOverflowedUintDowncast error raised by the GovToken contract.
type GovTokenSafeCastOverflowedUintDowncast struct {
	Bits  uint8
	Value *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)
func GovTokenSafeCastOverflowedUintDowncastErrorID() common.Hash {
	return common.HexToHash("0x6dfcc6503a32754ce7a89698e18201fc5294fd4aad43edefee786f88423b1a12")
}

// UnpackSafeCastOverflowedUintDowncastError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)
func (govToken *GovToken) UnpackSafeCastOverflowedUintDowncastError(raw []byte) (*GovTokenSafeCastOverflowedUintDowncast, error) {
	out := new(GovTokenSafeCastOverflowedUintDowncast)
	if err := govToken.abi.UnpackIntoInterface(out, "SafeCastOverflowedUintDowncast", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenStringTooLong represents a StringTooLong error raised by the GovToken contract.
type GovTokenStringTooLong struct {
	Str string
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error StringTooLong(string str)
func GovTokenStringTooLongErrorID() common.Hash {
	return common.HexToHash("0x305a27a93f8e33b7392df0a0f91d6fc63847395853c45991eec52dbf24d72381")
}

// UnpackStringTooLongError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error StringTooLong(string str)
func (govToken *GovToken) UnpackStringTooLongError(raw []byte) (*GovTokenStringTooLong, error) {
	out := new(GovTokenStringTooLong)
	if err := govToken.abi.UnpackIntoInterface(out, "StringTooLong", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// GovTokenVotesExpiredSignature represents a VotesExpiredSignature error raised by the GovToken contract.
type GovTokenVotesExpiredSignature struct {
	Expiry *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error VotesExpiredSignature(uint256 expiry)
func GovTokenVotesExpiredSignatureErrorID() common.Hash {
	return common.HexToHash("0x4683af0ecae671986a1b991272ba6e7bcb633f179b33ccfb3beb636962b1efde")
}

// UnpackVotesExpiredSignatureError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error VotesExpiredSignature(uint256 expiry)
func (govToken *GovToken) UnpackVotesExpiredSignatureError(raw []byte) (*GovTokenVotesExpiredSignature, error) {
	out := new(GovTokenVotesExpiredSignature)
	if err := govToken.abi.UnpackIntoInterface(out, "VotesExpiredSignature", raw); err != nil {
		return nil, err
	}
	return out, nil
}
